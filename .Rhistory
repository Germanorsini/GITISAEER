)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
#variación Interanual
output$var_interanual <- renderText({
serie_seleccionada <- input$serie
mes_actual <- max(df$Mes)
mes_anterior <- mes_actual %m-% years(1)
if (serie_seleccionada %in% colnames(df)) {
valor_actual <- df %>% filter(Mes == mes_actual) %>% pull(!!rlang::sym(serie_seleccionada))
valor_anterior <- df %>% filter(Mes == mes_anterior) %>% pull(!!rlang::sym(serie_seleccionada))
if (!is.na(valor_actual) && !is.na(valor_anterior) && valor_anterior != 0) {
porcentaje <- round(((valor_actual - valor_anterior) / valor_anterior) * 100, 2)
paste0(porcentaje, "%")
} else {
"Datos insuficientes para calcular"
}
} else {
"Columna seleccionada no válida"
}
})
#Grafico Renderizado
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Ejecutar la aplicación
shinyApp(ui = ui, server = server)
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px"),
# Variación Interanual
h4(""),
div(style = "margin-top: 10px;",
h5("Variación interanual:"),
textOutput("var_interanual")),
div(
)
)
)
mainPanel(
```{r}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos"),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px"),
# Variaciones debajo del gráfico
h4("Cálculos adicionales"),
div(style = "margin-top: 10px;",
h5("Variación interanual:"),
textOutput("var_interanual")),
div(style = "margin-top: 10px;",
h5("Variación acumulada últimos 12 meses:"),
textOutput("var_ultimos12"))
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
# Filtrar datos según el rango seleccionado
df_filtered <- reactive({
df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
})
# Variación interanual
output$var_interanual <- renderText({
serie_seleccionada <- input$serie
mes_actual <- max(df$Mes)
mes_anterior <- mes_actual %m-% years(1)
valor_actual <- df %>% filter(Mes == mes_actual) %>% pull(serie_seleccionada)
valor_anterior <- df %>% filter(Mes == mes_anterior) %>% pull(serie_seleccionada)
if (!is.na(valor_actual) && !is.na(valor_anterior) && valor_anterior != 0) {
porcentaje <- round(((valor_actual - valor_anterior) / valor_anterior) * 100, 2)
paste0(porcentaje, "%")
} else {
"Datos insuficientes para calcular"
}
})
)
{r}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Chunk 1: setup
library(googledrive)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(googlesheets4)
library(zoo)
library(mFilter)
library(readxl)
library(shiny)
library(plotly)
library(dplyr)
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
shinyApp(ui, server)
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
shinyApp(ui, server)
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
shinyApp(ui, server)
# Chunk 1: setup
library(googledrive)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(googlesheets4)
library(zoo)
library(mFilter)
library(readxl)
library(shiny)
library(plotly)
library(dplyr)
# Cargar el data frame
dt <- read_excel(path = "C:/Users/german/Desktop/Curso R/ISAEER/Data/baseISAEER1.xlsx",
sheet = "ISAEER",
col_names = TRUE)
df <- dt
df$Mes <- as.Date(df$Mes)
# UI de la aplicación
ui <- fluidPage(
titlePanel("Índice Sintético de Actividad Económica de Entre Ríos "),
sidebarLayout(
sidebarPanel(
selectInput("serie", "Seleccione la serie de tiempo:",
choices = colnames(df)[-1]),
# Excluye la columna 'Mes' de las opciones
sliderInput("slider", "Seleccione el rango de meses:",
min = min(df$Mes), max = max(df$Mes),
value = c(min(df$Mes), max(df$Mes)),
timeFormat = "%Y-%m", step = 30)
),
mainPanel(
plotlyOutput("plot", width = "100%", height = "500px")
)
)
)
# Servidor para la aplicación
server <- function(input, output) {
output$plot <- renderPlotly({
df_filtered <- df %>%
filter(Mes >= input$slider[1] & Mes <= input$slider[2])
serie_seleccionada <- input$serie
plot_ly(df_filtered, x = ~Mes, y = as.formula(paste("~", serie_seleccionada)),
type = "scatter", mode = "lines", name = serie_seleccionada, line = list(color = "green")) %>%
layout(
title = paste("Serie de Tiempo: ", serie_seleccionada),
xaxis = list(title = "Mes"),
yaxis = list(title = serie_seleccionada)
)
})
}
shinyApp(ui, server)
suma <- function(valor1,valor3) {valor 1 + valor 3}
suma <- function(valor1,  valor3) {valor1 + valor3}
suma
suma (5,5)
calcula_ratio <- function(vector) {
vector.max <- max(vector)
vector.min <- min(vector)
return(vector.max/vector.min) }
ratio <- calcula_ratio(vector= c(1,2,3,4))
ratio
